name: PR Deployment Preview

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main
      - develop

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and deploy preview
  deploy-preview:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      deployments: write
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=pr
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Deploy to preview environment
        run: |
          # Deploy to your preview environment (e.g., Vercel, Netlify, or custom infrastructure)
          echo "Deploying preview for PR #${{ github.event.number }}"
          # Add your deployment commands here
          # Example for Vercel:
          # npx vercel --prod --token ${{ secrets.VERCEL_TOKEN }}

      - name: Comment PR with preview URL
        uses: actions/github-script@v7
        with:
          script: |
            const previewUrl = `https://preview-${{ github.event.number }}.your-domain.com`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🚀 **Preview deployed successfully!**\n\n🔗 **Preview URL:** ${previewUrl}\n\nThis preview will be automatically updated with each new commit to this PR.`
            });

  # Performance testing
  performance:
    runs-on: ubuntu-latest
    needs: deploy-preview
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-results
          path: .lighthouseci/

  # Accessibility testing
  accessibility:
    runs-on: ubuntu-latest
    needs: deploy-preview
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run accessibility tests
        run: npm run test:a11y

      - name: Get changed files
        id: changed-files
        run: |
          if [ "${{ github.event.pull_request.base.ref }}" = "" ]; then
            BASE_BRANCH="origin/main"
          else
            BASE_BRANCH="${{ github.event.pull_request.base.ref }}"
          fi
          
          echo "base_branch=$BASE_BRANCH" >> $GITHUB_OUTPUT
          
          # Get list of changed files
          git diff --name-only $BASE_BRANCH...HEAD > changed_files.txt
          echo "Changed files:"
          cat changed_files.txt

      - name: Run Copilot Accessibility Analysis
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const changedFiles = fs.readFileSync('changed_files.txt', 'utf8')
              .split('\n')
              .filter(file => file.trim() && (file.endsWith('.jsx') || file.endsWith('.tsx') || file.endsWith('.js') || file.endsWith('.ts')));
            
            console.log('Analyzing accessibility for changed files:', changedFiles);
            
            // This would integrate with Copilot's API when available
            // For now, we'll create a report structure
            const accessibilityReport = {
              timestamp: new Date().toISOString(),
              pr_number: context.issue.number,
              changed_files: changedFiles,
              accessibility_issues: [],
              recommendations: []
            };
            
            // Save report for later use
            fs.writeFileSync('copilot-accessibility-report.json', JSON.stringify(accessibilityReport, null, 2));

      - name: Comment PR with Copilot Analysis
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              const report = JSON.parse(fs.readFileSync('copilot-accessibility-report.json', 'utf8'));
              
              const comment = `🤖 **GitHub Copilot Accessibility Analysis**
              
              **PR #${report.pr_number}** - ${new Date(report.timestamp).toLocaleString()}
              
              **Changed Files Analyzed:** ${report.changed_files.length}
              ${report.changed_files.map(file => `- \`${file}\``).join('\n')}
              
              **Accessibility Issues Found:** ${report.accessibility_issues.length}
              ${report.accessibility_issues.length > 0 ? report.accessibility_issues.map(issue => `- ⚠️ ${issue}`).join('\n') : '✅ No issues detected'}
              
              **Recommendations:**
              ${report.recommendations.length > 0 ? report.recommendations.map(rec => `- 💡 ${rec}`).join('\n') : 'No specific recommendations at this time.'}
              
              ---
              *This analysis is based on WCAG 2.1 guidelines and WAI-ARIA best practices.*`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.log('Error creating Copilot analysis comment:', error);
            }

      - name: Upload accessibility report
        uses: actions/upload-artifact@v4
        with:
          name: accessibility-report
          path: |
            reports/accessibility/
            copilot-accessibility-report.json 